<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Snowyurik&#39;s Blog</title>
    <link>http://example.org/</link>
    <description>Recent content on Snowyurik&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 28 Oct 2022 18:30:30 +0700</lastBuildDate><atom:link href="http://example.org/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Hire me</title>
      <link>http://example.org/hireme/</link>
      <pubDate>Fri, 28 Oct 2022 22:47:20 +0700</pubDate>
      
      <guid>http://example.org/hireme/</guid>
      <description>&lt;h2 id=&#34;contacts&#34;&gt;Contacts&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;email: &lt;a href=&#34;mailto:yuriy@vihv.org&#34;&gt;yuriy@vihv.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;telegram: &lt;a href=&#34;http://t.me/dukethecucumber&#34;&gt;@dukethecucumber&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;skype: yoreck_o&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;code-examples&#34;&gt;Code examples&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/snowyurik&#34;&gt;https://github.com/snowyurik&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;skills&#34;&gt;Skills&lt;/h2&gt;
&lt;p&gt;Cpp, C#, Java, ReactJS, PHP
(full CV on request)&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Maven multimodule project with Spring Boot</title>
      <link>http://example.org/post/mvn.spring.boot.multimodule/</link>
      <pubDate>Fri, 28 Oct 2022 18:30:30 +0700</pubDate>
      
      <guid>http://example.org/post/mvn.spring.boot.multimodule/</guid>
      <description>&lt;p&gt;I will try to be close to real task here.
Lets say we have RestAPI web application, command line application for manupulating with secure data (installation, initial user creation, etc).
Both will work with same data, so we need 3rd project which will be linked as dependency from cli and web.&lt;/p&gt;
&lt;h2 id=&#34;folder-structure&#34;&gt;Folder structure&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;rootProject
 -&amp;gt; datalib
 -&amp;gt; cli
 -&amp;gt; web
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;project-types&#34;&gt;Project types&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;rootProject/pom.xml&lt;/code&gt; should refer to type &lt;code&gt;pom&lt;/code&gt;. Type &lt;code&gt;pom&lt;/code&gt; means that rootProject is just a place for references from the other projects. There is no &lt;code&gt;target&lt;/code&gt;, no .jar files for the rooProject, it&amp;rsquo;s used by subprojects (aka modules) to find each other, plus if you have same dependensy in different subprojects you can only mention them once in &lt;code&gt;rootProject/pom.xml&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;All subprojects / modules will have type &lt;code&gt;jar&lt;/code&gt; in our case. So build will produce .jar files.&lt;/p&gt;
&lt;h2 id=&#34;linking-everything-together&#34;&gt;Linking everything together&lt;/h2&gt;
&lt;h3 id=&#34;package-name&#34;&gt;Package name&lt;/h3&gt;
&lt;p&gt;Package name aka namespace has to be the same for rootProject and submodules.&lt;/p&gt;
&lt;h3 id=&#34;groupid&#34;&gt;GroupID&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;project/groupId&lt;/code&gt; also has to be the same for rootProject and submodules, like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;project ..&amp;gt;
  ...
  &amp;lt;groupId&amp;gt;org.rootProject&amp;lt;/groupId&amp;gt;
  ...
&amp;lt;/project&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;rootproject-has-to-link-to-all-modules&#34;&gt;RootProject has to link to all modules:&lt;/h3&gt;
&lt;p&gt;file: rootProject/pom.xml&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;project ..&amp;gt;
  ...
  &amp;lt;!-- modules --&amp;gt;
  &amp;lt;modules&amp;gt;
    &amp;lt;module&amp;gt;web&amp;lt;/module&amp;gt;
    &amp;lt;module&amp;gt;cli&amp;lt;/module&amp;gt;
    &amp;lt;module&amp;gt;datalib&amp;lt;/module&amp;gt;
  &amp;lt;/modules&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;modules-has-to-link-rootproject-as-a-parent&#34;&gt;Modules has to link rootProject as a parent&lt;/h3&gt;
&lt;p&gt;files: rootProject/cli/pom.xml, rootProject/web/pom.xml, rootProject/datalib/pom.xml&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;project&amp;gt;
    ...
    &amp;lt;parent&amp;gt;
        &amp;lt;artifactId&amp;gt;rootProject&amp;lt;/artifactId&amp;gt;
        &amp;lt;groupId&amp;gt;org.rootProject&amp;lt;/groupId&amp;gt;
        &amp;lt;version&amp;gt;1.0-SNAPSHOT&amp;lt;/version&amp;gt;
    &amp;lt;/parent&amp;gt;
    ...
&amp;lt;/project&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;but-wait-spring-has-to-be-parent-project-too&#34;&gt;But wait! Spring has to be parent project too!&lt;/h3&gt;
&lt;p&gt;Obviously, we can&amp;rsquo;t have 2 parants for the module.
So we have to move spring reference to rootProject/pom.xml.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;project&amp;gt;
    &amp;lt;groupId&amp;gt;org.rootProject&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;rootProject&amp;lt;/artifactId&amp;gt;
    &amp;lt;packaging&amp;gt;pom&amp;lt;/packaging&amp;gt;
    &amp;lt;version&amp;gt;1.0-SNAPSHOT&amp;lt;/version&amp;gt;
    &amp;lt;name&amp;gt;rootProject&amp;lt;/name&amp;gt;
    
    &amp;lt;parent&amp;gt;
        &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;spring-boot-starter-parent&amp;lt;/artifactId&amp;gt;
        &amp;lt;version&amp;gt;2.7.4&amp;lt;/version&amp;gt;
        &amp;lt;relativePath/&amp;gt; &amp;lt;!-- lookup parent from repository --&amp;gt;
    &amp;lt;/parent&amp;gt;
    ...
&amp;lt;/project&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Hierarhy is like this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Spring Boot&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;rootProject&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;web&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;cli&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;datalib&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;using-one-module-from-another&#34;&gt;Using one module from another&lt;/h3&gt;
&lt;p&gt;Right now, our modules know about rootProject but they do not know about each other. Datalib will be used in cli and web, so we need to add dependency:&lt;/p&gt;
&lt;p&gt;files: rootProject/cli/pom.xml, rootProject/web/pom.xml&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;project&amp;gt;
    ...
    &amp;lt;dependencies&amp;gt;
		&amp;lt;dependency&amp;gt;
			&amp;lt;groupId&amp;gt;org.rootProject&amp;lt;/groupId&amp;gt;
			&amp;lt;artifactId&amp;gt;datalib&amp;lt;/artifactId&amp;gt;
			&amp;lt;version&amp;gt;${project.version}&amp;lt;/version&amp;gt;
			&amp;lt;scope&amp;gt;provided&amp;lt;/scope&amp;gt;
			&amp;lt;type&amp;gt;jar&amp;lt;/type&amp;gt;
		&amp;lt;/dependency&amp;gt;
		...
    &amp;lt;/dependencies&amp;gt;
    ...
&amp;lt;/project&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;build-commands&#34;&gt;Build commands&lt;/h3&gt;
&lt;p&gt;That&amp;rsquo;s a bit counterintuitive. You need 2 commands:&lt;/p&gt;
&lt;p&gt;From rootProject/&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mvn clean install
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;will build all projects in correct order and place relusting .jar files in local storage, where java will be able to find them.
To run maven commands on subproject, you need to use -pl and -am, like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mvn -am -pl web spring-boot:run
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;or&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mvn -am -pl cli test
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;-am&lt;/code&gt; means &amp;ldquo;take dependencies into consideration&amp;rdquo; without that you might get &lt;code&gt;symbol not found&lt;/code&gt; error.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;-pl&lt;/code&gt; just short for &amp;ndash;project and thats just set context to module.&lt;/p&gt;
&lt;h3 id=&#34;spring-is-this-loose-coupled-not-that-loose-coupled&#34;&gt;Spring is this loose coupled, not that loose coupled&lt;/h3&gt;
&lt;p&gt;You king of can use spring only for web module, but you will need to create wrapper components for datalib classes. And I don&amp;rsquo;t think it&amp;rsquo;s possible to use Spring based datalib in cli if cli is not Spring based. But I might be wrong.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>A bit of everyday hugo commands</title>
      <link>http://example.org/post/hugocommands/</link>
      <pubDate>Fri, 28 Oct 2022 01:44:42 +0700</pubDate>
      
      <guid>http://example.org/post/hugocommands/</guid>
      <description>&lt;p&gt;I&amp;rsquo;m using Hugo as blog engine. So, here is a bit of cli commands&lt;/p&gt;
&lt;h3 id=&#34;create-new-post&#34;&gt;Create new post&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;hugo new post/postname.md
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;formatting-in-summary&#34;&gt;Formatting in summary&lt;/h3&gt;
&lt;p&gt;By default summary is plain text, soo.. just use &lt;code&gt;&amp;lt;!--mоre--&amp;gt;&lt;/code&gt; and formatting will work in summary.
I&amp;rsquo;m going to make most of posts just only summary, maybe I can change hugo code, to add &lt;code&gt;&amp;lt;!--mоre--&amp;gt;&lt;/code&gt; automatically?&lt;/p&gt;
&lt;p&gt;Lets try..&lt;/p&gt;
&lt;p&gt;Yes, I can change &lt;code&gt;archetypes/default.md&lt;/code&gt;.
And I also want draft to be false by default.. here we go:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;---
title: &amp;quot;{{ replace .Name &amp;quot;-&amp;quot; &amp;quot; &amp;quot; | title }}&amp;quot;
date: {{ .Date }}
draft: false
---

&amp;lt;!--mоre--&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Btw: I used Cyrillic &amp;lsquo;o&amp;rsquo; in &amp;lsquo;more&amp;rsquo;, otherwise it breaks layout. Maybe there is better solution, but I do not think I will need to talk about &lt;code&gt;&amp;lt;!--mоre--&amp;gt;&lt;/code&gt; again any time soon.&lt;/p&gt;
&lt;h3 id=&#34;publish-post&#34;&gt;Publish post&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Go to post header section (top of .md file)&lt;/li&gt;
&lt;li&gt;Remove &lt;code&gt;draft: true&lt;/code&gt; or replace it with &lt;code&gt;draft:false&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;run-locally&#34;&gt;Run locally&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;hugo server -D
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Will run hugo server in &amp;ldquo;development&amp;rdquo; mode, draft blogs are visible&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;hugo server
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;will run it in &amp;ldquo;release&amp;rdquo; mode&lt;/p&gt;
&lt;h3 id=&#34;deploy&#34;&gt;Deploy&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;We need 2 repositories:
&amp;ndash; One is our root repository with themes and all raw data
&amp;ndash; Subproject liked to &lt;code&gt;%blogname%.github.io&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;So &lt;code&gt;git add %ssh.link.to.blogname.project.on.github% public&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hugo&lt;/code&gt; command will compile static html content to &lt;code&gt;public&lt;/code&gt; folder&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cd public &amp;amp;&amp;amp; git add . &amp;amp;&amp;amp; git commit -m &#39;whatever&#39; &amp;amp;&amp;amp; git push&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Also: README.md has a priority over index.html, so, remove it if you had added it during project creation.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>So, it&#39;s crisis time</title>
      <link>http://example.org/post/initblog/</link>
      <pubDate>Fri, 28 Oct 2022 01:28:11 +0700</pubDate>
      
      <guid>http://example.org/post/initblog/</guid>
      <description>&lt;p&gt;Hosting services become unpredictable this days. The fact is: you can loose access to your content.
Using &amp;ldquo;discipline&amp;rdquo; for content backup does not work long term, even if backups are automated.
But there is solution:&lt;/p&gt;
&lt;p&gt;If you create workflow where contenets can only published if you already have a backup - you will always have a backup.&lt;/p&gt;
&lt;p&gt;So, here we are: on githun.io, aka github pages.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Even if I will lose access to github - I will have it all on my laptop.&lt;/li&gt;
&lt;li&gt;If I will lose my laptop - I will be able to restore cotent from git&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the past I had a blog build around transparency idea, more like diary. However.. this time I think I should focus.
But we will see.&lt;/p&gt;
&lt;p&gt;Right now, I will focus on 2 topics:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Techical tips, because there are a lot of new technologies which require too much search for simple things.&lt;/li&gt;
&lt;li&gt;Digital nomad life tips, like &amp;ldquo;How to get cheap fresh water in Thailand&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Basically, anything that takes more than a day to figure out might worth posting.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
