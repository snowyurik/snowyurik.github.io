<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Agile on Snowyurik&#39;s Blog</title>
    <link>https://snowyurik.vihv.org/tags/agile/</link>
    <description>Recent content in Agile on Snowyurik&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 01 Jul 2023 22:19:56 +0700</lastBuildDate><atom:link href="https://snowyurik.vihv.org/tags/agile/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>IT Management Paradox</title>
      <link>https://snowyurik.vihv.org/post/it-management-paradox/</link>
      <pubDate>Sat, 01 Jul 2023 22:19:56 +0700</pubDate>
      
      <guid>https://snowyurik.vihv.org/post/it-management-paradox/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;Effective management practices lead to small teams.&lt;/li&gt;
&lt;li&gt;Ineffective management practices lead to huge teams.&lt;/li&gt;
&lt;li&gt;Most people are involved in ineffective practices.&lt;/li&gt;
&lt;li&gt;Demand for ineffective management practices is higher, than denamd for effective practices.&lt;/li&gt;
&lt;li&gt;Education system follow the demand of the majority.&lt;/li&gt;
&lt;li&gt;Education system teach ineffective management practices, because the demand is higher.&lt;/li&gt;
&lt;li&gt;Effective management practices extinct.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This explains all that billionairs with unfinished education: it&amp;rsquo;s better to know nothing, then to know wrong.&lt;/p&gt;
&lt;h2 id=&#34;example&#34;&gt;Example:&lt;/h2&gt;
&lt;p&gt;&amp;ldquo;Tick-the-code&amp;rdquo; and similar practices are widely replaced by &amp;ldquo;intuition-based-review-of-single-commit&amp;rdquo; practices. Intuition based review is perfectly useless. Whatever you call it &amp;ldquo;expert review&amp;rdquo; or &amp;ldquo;experience based review&amp;rdquo; or whatever. Single commit review is also perfectly useless. All commits can be ideal, but together they can, and will, create nonsence. Bare minimum for review is 1 class.&lt;/p&gt;
&lt;h2 id=&#34;old-school-agile-rule-of-thumb&#34;&gt;Old-school Agile rule of thumb&lt;/h2&gt;
&lt;p&gt;If it needs special tools - it&amp;rsquo;s bullshit.&lt;/p&gt;
&lt;p&gt;IMHO, if the tool is just a replacement for pen and paper, but you still can do it with pen and peper - it&amp;rsquo;s ok. It&amp;rsquo;s not handy to use pen and paper in the age of remote work.
But anything more complex will only make things worse.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Agile: Why do we use Todo Work Ready Done, instead of Red Green Refactor Deploy?</title>
      <link>https://snowyurik.vihv.org/post/agile-why-we-use-todo-work-ready-done-not-red-green-refactor-deploy/</link>
      <pubDate>Thu, 12 Jan 2023 00:40:48 +0700</pubDate>
      
      <guid>https://snowyurik.vihv.org/post/agile-why-we-use-todo-work-ready-done-not-red-green-refactor-deploy/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Looks obvious, right? ðŸ¤”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;current-setup&#34;&gt;Current setup&lt;/h2&gt;
&lt;p&gt;In TDD, we use the following sequence:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Red: try and fail&lt;/li&gt;
&lt;li&gt;Green: fix and confirm&lt;/li&gt;
&lt;li&gt;Refactor: polish solution&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That&amp;rsquo;s 100% solid time-proven sequence. But in Agile/Scrum/Kanban we completely different approach:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Todo&lt;/li&gt;
&lt;li&gt;Work&lt;/li&gt;
&lt;li&gt;Ready&lt;/li&gt;
&lt;li&gt;Done&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Which is not as good as it looks at first sight. That&amp;rsquo;s why Trello and Jira had an option to set custom workflow and custom task states.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;TDD workflow and Agile task workflow does not map to each other in any aspect! ðŸ¥²&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So, why are we doing that? To be more &amp;ldquo;manager friendly&amp;rdquo;? Is it &amp;ldquo;positive thinking&amp;rdquo; which stops as from using the word &amp;ldquo;fail&amp;rdquo;?&lt;/p&gt;
&lt;p&gt;Well, we can replace &amp;ldquo;try and fail&amp;rdquo; with &amp;ldquo;try and confirm that feature is not implemented / reproduce the bug&amp;rdquo;, happy?&lt;/p&gt;
&lt;h2 id=&#34;suggestion&#34;&gt;Suggestion&lt;/h2&gt;
&lt;p&gt;Maybe we can use sequence like that, for task management:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Pick: from heap to sprint backlog&lt;/li&gt;
&lt;li&gt;Try/Red: Try it and confirm the issue&lt;/li&gt;
&lt;li&gt;Fix/Green: Fix and confirm solution&lt;/li&gt;
&lt;li&gt;Polish/Refactor: polish solution&lt;/li&gt;
&lt;li&gt;Commit: share changes with the team&lt;/li&gt;
&lt;li&gt;Package: aggregate changes into release package&lt;/li&gt;
&lt;li&gt;Test: QA team test the package&lt;/li&gt;
&lt;li&gt;Deploy: publish package for general public&lt;/li&gt;
&lt;li&gt;Collect feedback: from support team, investors, etc.&lt;/li&gt;
&lt;li&gt;Fund: get money for next sprint&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This looks much closer to reality, you know.. ðŸ˜Ž&lt;/p&gt;
&lt;p&gt;I suggest using &lt;em&gt;Try/Fix/Polish&lt;/em&gt; insteard of &lt;em&gt;Red/Green/Refactor&lt;/em&gt; to avoid confusion between task management and coding. But that sets maps to each other perfectly!  &lt;br&gt;
Also, that&amp;rsquo;s closer to the idea behind SMART criteria.&lt;/p&gt;
&lt;p&gt;For in-house projects, it can be simplified to just:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Pick&lt;/li&gt;
&lt;li&gt;Try&lt;/li&gt;
&lt;li&gt;Fix&lt;/li&gt;
&lt;li&gt;Polish&lt;/li&gt;
&lt;li&gt;Deploy&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Why not?&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
  </channel>
</rss>
